{"version":3,"sources":["../server/index.js"],"names":["mongodb_url","config","mongolabs","port","process","env","PORT","app","server","require","Server","io","mongoose","connect","err","console","log","use","bodyParser","urlencoded","extended","json","adminRoutes","questionRoutes","req","res","error","status","express","path","join","__dirname","NODE_ENV","get","sendfile","sendFile","listen"],"mappings":";;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAZA;AACA;AAaA,IAAMA,WAAW,GAAGC,mBAAOC,SAAP,IAAoB,sCAAxC;AACA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,IAAMC,GAAG,GAAG,0BAAZ;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBC,MAAhB,CAAuBH,GAAvB,CAAf;;AACA,IAAMI,EAAE,GAAGF,OAAO,CAAC,WAAD,CAAP,CAAqBD,MAArB,CAAX,C,CACA;AACA;;;AACAI,qBAASC,OAAT,CAAiBb,WAAjB,EAA8B,UAASc,GAAT,EAAc;AAC1C,MAAIA,GAAJ,EAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACTC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,CAHD,E,CAIA;AACA;;;AACAT,GAAG,CAACU,GAAJ,CAAQ,wBAAO,KAAP,CAAR;AACAV,GAAG,CAACU,GAAJ,CACEC,uBAAWC,UAAX,CAAsB;AACpBC,EAAAA,QAAQ,EAAE;AADU,CAAtB,CADF;AAKAb,GAAG,CAACU,GAAJ,CAAQC,uBAAWG,IAAX,EAAR;AACAd,GAAG,CAACU,GAAJ,CAAQ,uBAAR,E,CACA;AACA;;AACAV,GAAG,CAACU,GAAJ,CAAQ,GAAR,EAAaK,sBAAb,E,CACA;;AACAf,GAAG,CAACU,GAAJ,CAAQ,QAAR,EAAkB,4BAAWN,EAAX,CAAlB;AACAJ,GAAG,CAACU,GAAJ,CAAQ,YAAR,EAAsBM,0BAAtB;AACAhB,GAAG,CAACU,GAAJ,CAAQ,UAASO,GAAT,EAAcC,GAAd,EAAmB;AACzB;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACAD,EAAAA,OAAO,CAACW,KAAR,CAAcF,GAAG,CAACE,KAAlB;AACAD,EAAAA,GAAG,CAACE,MAAJ,CAAWH,GAAG,CAACE,KAAJ,CAAUC,MAArB,EAA6BN,IAA7B,CAAkCG,GAAG,CAACE,KAAtC;AACD,CALD;AAOAnB,GAAG,CAACU,GAAJ,CAAQW,8BAAeC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,cAArB,CAAf,CAAR,E,CAEA;;AACA,IAAI3B,OAAO,CAACC,GAAR,CAAY2B,QAAZ,KAAyB,YAA7B,EAA2C;AACzCzB,EAAAA,GAAG,CAAC0B,GAAJ,CAAQ,GAAR,EAAa,UAACT,GAAD,EAAMC,GAAN,EAAc;AACzBA,IAAAA,GAAG,CAACS,QAAJ,CAAaL,iBAAKC,IAAL,CAAWC,SAAS,GAAG,yBAAvB,CAAb;AACD,GAFD;AAGD,CAJD,MAIM;AACJ;AACAxB,EAAAA,GAAG,CAAC0B,GAAJ,CAAQ,GAAR,EAAa,UAACT,GAAD,EAAMC,GAAN,EAAc;AACzBA,IAAAA,GAAG,CAACU,QAAJ,CAAaN,iBAAKC,IAAL,CAAUC,SAAS,GAAG,0BAAtB,CAAb;AACD,GAFD;AAGD;;AAGDvB,MAAM,CAAC4B,MAAP,CAAcjC,IAAd,EAAoB,YAAW;AAC7BY,EAAAA,OAAO,CAACC,GAAR,CAAY,6CAA6Cb,IAA7C,GAAoD,KAAhE,EAD6B,CAE7B;AACA;AACD,CAJD","sourcesContent":["// =====START GLOBAL VAR DECLARATION=====\n// import \"@babel/polyfill\";\nimport express from 'express'\nimport logger from 'morgan'\nimport mongoose from 'mongoose';\nimport bodyParser from 'body-parser';\nimport fs from 'fs';\nimport cors from 'cors';\nimport path from 'path';\nimport config from '../config';\nimport gameRoutes from './routes/gameRoutes';\nimport adminRoutes from './routes/userRoutes';\nimport questionRoutes from './routes/questionRoutes';\n\nconst mongodb_url = config.mongolabs || 'mongodb://localhost/project_red_pill';\nconst port = process.env.PORT || 8000;\nconst app = express();\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server);\n// =======================================\n// CONNECT TO LOCAL MONGO DB OR MONGOLABS\nmongoose.connect(mongodb_url, function(err) {\n  if (err) console.log(err);\n  console.log('Connected to MongoDB');\n});\n// =======================================\n// SETUP MIDDLEWARE FOR API\napp.use(logger('dev'));\napp.use(\n  bodyParser.urlencoded({\n    extended: true\n  })\n);\napp.use(bodyParser.json());\napp.use(cors());\n// =======================================\n// Initialize routes to use\napp.use('/', adminRoutes);\n//======================= pass the io server to game routes to create sockets =======================\napp.use('/games', gameRoutes(io));\napp.use('/questions', questionRoutes);\napp.use(function(req, res) {\n  //======================= ERROR IN ROUTE =======================\n  console.log('=========================SERVER ERROR:');\n  console.error(req.error);\n  res.status(req.error.status).json(req.error);\n});\n\napp.use(express.static(path.join(__dirname, 'client/build')));\n\n//PROD mode\nif (process.env.NODE_ENV === 'production') {\n  app.get('*', (req, res) => {\n    res.sendfile(path.join((__dirname = 'client/build/index.html')));\n  });\n}else {\n  //DEV mode\n  app.get('*', (req, res) => {\n    res.sendFile(path.join(__dirname + 'client/public/index.html'));\n  });\n}\n\n\nserver.listen(port, function() {\n  console.log('ADMIN API SERVICE -- Listening on port: ' + port + '...');\n  //TODO: capture log files of crashes\n  //fs.writeFile(__dirname + '/start.log', 'started', (err) => console.log('START LOGGED SAVED'));\n});\n"],"file":"index.js"}
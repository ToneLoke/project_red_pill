{"version":3,"sources":["../../server/models/Game.js"],"names":["PlayerSchema","Schema","_id","type","Types","ObjectId","ref","username","String","score","Number","answers","q_id","submission","GameSchema","adminId","required","index","players","title","qNum","questions","totalPoints","min","status","timestamps","preSave","next","isModified","map","Question","findOne","select","Promise","all","qs","reduce","prev","cur","points","pre","addPlayer","player","find","p","save","methods","Game"],"mappings":"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","sourcesContent":["'use strict';\nimport { Schema, model } from 'mongoose';\nimport Question from './Question';\n\nconst PlayerSchema = new Schema({\n  _id: {\n    type: Schema.Types.ObjectId,\n    ref: 'User'\n  },\n  username: String,\n  score: {\n    type: Number,\n    default: 0\n  },\n  answers: [\n    {\n      q_id: {\n        type: Schema.Types.ObjectId,\n        ref: 'Question'\n      },\n      submission: [String]\n    }\n  ]\n});\n\nconst GameSchema = new Schema(\n  {\n    adminId: {\n      type: Schema.Types.ObjectId,\n      ref: 'User',\n      required: true,\n      index: true\n    },\n    players: [PlayerSchema],\n    title: {\n      type: String,\n      required: true\n    },\n    qNum: {\n      type: Number,\n      default: 0\n    },\n    questions: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: 'Question'\n      }\n    ],\n    totalPoints: {\n      type: Number,\n      default: 0,\n      min: 0\n    },\n    status: {\n      type: String,\n      enum: ['live', 'done', 'draft', 'pause'],\n      default: 'draft',\n      index: true\n    }\n  },\n  { timestamps: true }\n);\nconst preSave = async function(next) {\n  if (this.isModified('questions')) {\n    const questions = this.questions.map((_id) => Question.findOne({ _id }).select('points -_id'));\n    const qs = await Promise.all(questions);\n    this.totalPoints = qs.reduce((prev, cur) => prev + cur.points, 0);\n  }\n  next();\n}\n\nGameSchema.pre('save', preSave );\n\nconst addPlayer = async function(player) {\n  this.players = this.players.find((p) => p._id == player._id)\n    ? this.players\n    : [...this.players, player];\n  await this.save();\n};\n\nGameSchema.methods.addPlayer = addPlayer;\n\nconst Game = model('Game', GameSchema);\nexport default Game;\n"],"file":"Game.js"}
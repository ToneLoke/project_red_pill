{"version":3,"sources":["../../server/routes/auth.js"],"names":["secret","config","token_auth","req","res","next","authorization","headers","token","split","error","jwt","verify","err","tokenData","status","json","message","success","decoded"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,MAAM,GAAGC,mBAAOD,MAAtB;;AAEA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC;AACA,MAAMC,aAAa,GAAGH,GAAG,CAACI,OAAJ,CAAYD,aAAlC;AACA,MAAIE,KAAK,GAAGF,aAAa,GAAGA,aAAa,CAACG,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAH,GAAiC,KAA1D,CAHqC,CAIrC;;AACA,MAAIN,GAAG,CAACO,KAAR,EAAe,OAAOL,IAAI,EAAX;;AACf,MAAIG,KAAJ,EAAW;AACTG,6BAAIC,MAAJ,CAAWJ,KAAX,EAAkBR,MAAlB,EAA0B,UAACa,GAAD,EAAMC,SAAN,EAAoB;AAC5C,UAAID,GAAJ,EAAS,OAAOT,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,qBAAX;AAAkCC,QAAAA,OAAO,EAAE;AAA3C,OAArB,CAAP,CAAT,KACK;AACHf,QAAAA,GAAG,CAACgB,OAAJ,GAAcL,SAAd;AACA,eAAOT,IAAI,EAAX;AACD;AACF,KAND;AAOD,GARD,MAQO;AACL,WAAOD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE,cAAX;AAA2BC,MAAAA,OAAO,EAAE;AAApC,KAArB,CAAP;AACD;AACF,CAjBD;;eAkBehB,U","sourcesContent":["import jwt from 'jsonwebtoken';\nimport config from '../../config';\n\nconst secret = config.secret;\n\nconst token_auth = (req, res, next) => {\n  // LOOK FOR TOKEN IN 3 LOCATIONS BODY OBJECT PARAMETER KEY OR HEADER OBJECT\n  const authorization = req.headers.authorization;\n  let token = authorization ? authorization.split(' ')[1] : false;\n  // IF A TOKEN EXISTS SEND THE DECODED INFORMATION\n  if (req.error) return next();\n  if (token) {\n    jwt.verify(token, secret, (err, tokenData) => {\n      if (err) return res.status(401).json({ message: 'invalid credentials', success: false });\n      else {\n        req.decoded = tokenData;\n        return next();\n      }\n    });\n  } else {\n    return res.status(401).json({ message: 'please login', success: false });\n  }\n};\nexport default token_auth;\n"],"file":"auth.js"}
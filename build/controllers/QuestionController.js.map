{"version":3,"sources":["../../server/controllers/QuestionController.js"],"names":["QuestionController","model","all","bind","createQuestions","req","res","next","findAll","questions","status","json","error","message","errors","question","type","choices","answers","points","difficulty","maxTime","promiseQuestions","map","create","Promise","qs","AppController"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAEMA,kB;;;;;AACJ;AACA,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8HAAMA,KAAN;AACA,UAAKC,GAAL,GAAW,MAAKA,GAAL,CAASC,IAAT,gDAAX;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBD,IAArB,gDAAvB;AAHiB;AAIlB;;;;;;;oDAESE,G,EAAKC,G,EAAKC,I;;;;;;;;uBAEQ,KAAKC,OAAL,E;;;AAAlBC,gBAAAA,S;AACNH,gBAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,SAArB;;;;;;;AAEAJ,gBAAAA,GAAG,CAACO,KAAJ,GAAY;AAAEC,kBAAAA,OAAO,EAAE,+BAAX;AAA4CH,kBAAAA,MAAM,EAAE,GAApD;AAAyDI,kBAAAA,MAAM;AAA/D,iBAAZ;AACAP,gBAAAA,IAAI;;;;;;;;;;;;;;;;;;;;;qDAIcF,G,EAAKC,G,EAAKC,I;;;;;;AACxBE,gBAAAA,S,GAAY,CAChB;AACEM,kBAAAA,QAAQ,EAAE,yEADZ;AAEEC,kBAAAA,IAAI,EAAE,QAFR;AAGEC,kBAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,OAAT,CAHX;AAIEC,kBAAAA,OAAO,EAAE,CAAC,CAAD,CAJX;AAKEC,kBAAAA,MAAM,EAAE,EALV;AAMEC,kBAAAA,UAAU,EAAE,QANd;AAOEC,kBAAAA,OAAO,EAAE;AAPX,iBADgB,EAUhB;AACEN,kBAAAA,QAAQ,EAAE,kBADZ;AAEEC,kBAAAA,IAAI,EAAE,UAFR;AAGEC,kBAAAA,OAAO,EAAE,CACP,8CADO,EAEP,gFAFO,EAGP,wCAHO,EAIP,kBAJO,EAKP,mBALO,CAHX;AAUEC,kBAAAA,OAAO,EAAE,CAAC,CAAD,CAVX;AAWEC,kBAAAA,MAAM,EAAE,EAXV;AAYEC,kBAAAA,UAAU,EAAE;AAZd,iBAVgB,EAwBhB;AACEL,kBAAAA,QAAQ,EAAE,6BADZ;AAEEC,kBAAAA,IAAI,EAAE,QAFR;AAGEC,kBAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,OAAT,CAHX;AAIEC,kBAAAA,OAAO,EAAE,CAAC,CAAD,CAJX;AAKEC,kBAAAA,MAAM,EAAE,GALV;AAMEE,kBAAAA,OAAO,EAAE;AANX,iBAxBgB,C,EAiClB;;AACMC,gBAAAA,gB,GAAmBb,SAAS,CAACc,GAAV,CAAc,KAAKC,MAAnB,C;;;uBAENC,OAAO,CAACvB,GAAR,CAAYoB,gBAAZ,C;;;AAAXI,gBAAAA,E;AACNpB,gBAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBe,EAArB;;;;;;;AAEArB,gBAAAA,GAAG,CAACO,KAAJ,GAAY;AAAEC,kBAAAA,OAAO,EAAE,yBAAX;AAAsCH,kBAAAA,MAAM,EAAE,GAA9C;AAAmDI,kBAAAA,MAAM;AAAzD,iBAAZ;AACAP,gBAAAA,IAAI;;;;;;;;;;;;;;;;;;EA3DuBoB,0B;;eA+DlB3B,kB","sourcesContent":["import AppController from './AppController';\n\nclass QuestionController extends AppController {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(model) {\n    super(model);\n    this.all = this.all.bind(this);\n    this.createQuestions = this.createQuestions.bind(this);\n  }\n\n  async all(req, res, next) {\n    try {\n      const questions = await this.findAll();\n      res.status(200).json(questions);\n    } catch (e) {\n      req.error = { message: 'cannot retrieve all questions', status: 500, errors: e };\n      next();\n    }\n  }\n\n  async createQuestions(req, res, next) {\n    const questions = [\n      {\n        question: \"A SELLING OBJECTION is when a customer says 'No' to buying the vehicle.\",\n        type: 'switch',\n        choices: ['true', 'false'],\n        answers: [0],\n        points: 50,\n        difficulty: 'medium',\n        maxTime: 100\n      },\n      {\n        question: 'An OBJECTION is:',\n        type: 'multiple',\n        choices: [\n          'A reason or argument presented in opposition',\n          'A statement of opposition to an aspect of a judicial or other legal proceeding',\n          'A feeling or expression of disapproval',\n          'All of the Above',\n          'None of the above'\n        ],\n        answers: [3],\n        points: 75,\n        difficulty: 'medium'\n      },\n      {\n        question: 'A SELLING PARTY is illegal.',\n        type: 'switch',\n        choices: ['true', 'false'],\n        answers: [0],\n        points: 100,\n        maxTime: 120\n      }\n    ];\n    //create promise array to create all questions\n    const promiseQuestions = questions.map(this.create);\n    try {\n      const qs = await Promise.all(promiseQuestions);\n      res.status(200).json(qs);\n    } catch (e) {\n      req.error = { message: 'cannot create questions', status: 500, errors: e };\n      next();\n    }\n  }\n}\nexport default QuestionController;\n"],"file":"QuestionController.js"}
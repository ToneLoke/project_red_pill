{"version":3,"sources":["../../server/controllers/LiveController.js"],"names":["LiveController","model","io","id","gameId","connected","bind","updateGame","socket","_model","findOne","_id","populate","game","console","log","adminId","user","addPlayer","emit","username","update","findOneAndUpdate","AppController"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAEMA,c;;;;;AACJ;AACA,0BAAYC,KAAZ,EAAmBC,EAAnB,EAAuBC,EAAvB,EAA2B;AAAA;;AAAA;AACzB,0HAAMF,KAAN;AACA,UAAKG,MAAL,GAAcD,EAAd;AACA,UAAKD,EAAL,GAAUA,EAAV;AACA,UAAKG,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,gDAAjB;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBD,IAAhB,gDAAlB;AALyB;AAM1B;;;;;;;oDAEeE,M;;;;;;;;uBAEO,KAAKC,MAAL,CAChBC,OADgB,CACR;AAAEC,kBAAAA,GAAG,EAAE,KAAKP;AAAZ,iBADQ,EAEhBQ,QAFgB,CAEP,SAFO,EAGhBA,QAHgB,CAGP,WAHO,C;;;AAAbC,gBAAAA,I;AAINC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,OAAL,CAAaL,GAAzB;AACA,oBAAIH,MAAM,CAACS,IAAP,CAAYN,GAAZ,IAAmBE,IAAI,CAACG,OAAL,CAAaL,GAApC,EAAyCE,IAAI,CAACK,SAAL,CAAeV,MAAM,CAACS,IAAtB;AACzC,qBAAKf,EAAL,CAAQiB,IAAR,CAAa,YAAb,EAA2BX,MAAM,CAACS,IAAP,CAAYG,QAAvC;AACA,qBAAKlB,EAAL,CAAQiB,IAAR,CAAa,WAAb,EAA0BN,IAA1B;;;;;;;AAEAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;;;;;;;;;;;;;;;;;;;;qDAGaM,M;;;;;;;uBACI,KAAKZ,MAAL,CAChBa,gBADgB,CACC;AAAEX,kBAAAA,GAAG,EAAE,KAAKP;AAAZ,iBADD,EAEhBQ,QAFgB,CAEP,SAFO,EAGhBA,QAHgB,CAGP,WAHO,C;;;AAAbC,gBAAAA,I;;;;;;;;;;;;;;;;;;EAzBmBU,0B;;eA+BdvB,c","sourcesContent":["import AppController from './AppController';\n\nclass LiveController extends AppController {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(model, io, id) {\n    super(model);\n    this.gameId = id;\n    this.io = io;\n    this.connected = this.connected.bind(this);\n    this.updateGame = this.updateGame.bind(this);\n  }\n\n  async connected(socket) {\n    try {\n      const game = await this._model\n        .findOne({ _id: this.gameId })\n        .populate('adminId')\n        .populate('questions');\n      console.log(game.adminId._id);\n      if (socket.user._id != game.adminId._id) game.addPlayer(socket.user);\n      this.io.emit('NEW_PLAYER', socket.user.username);\n      this.io.emit('connected', game);\n    } catch (error) {\n      console.log('ERROR', error);\n    }\n  }\n  async updateGame(update) {\n    const game = await this._model\n      .findOneAndUpdate({ _id: this.gameId })\n      .populate('adminId')\n      .populate('questions');\n  }\n}\nexport default LiveController;\n"],"file":"LiveController.js"}
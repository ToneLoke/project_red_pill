{"version":3,"sources":["../../server/controllers/UserController.js"],"names":["AdminController","model","login","bind","me","register","_id","username","games","jwt","sign","config","secret","req","res","next","body","password","Error","create","user","token","makeToken","status","json","message","error","errors","_model","findOne","populate","authenticate","decoded","AppController"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;IAEMA,e;;;;;AACJ;AACA,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,2HAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa,MAAKA,KAAL,CAAWC,IAAX,gDAAb;AACA,UAAKC,EAAL,GAAU,MAAKA,EAAL,CAAQD,IAAR,gDAAV;AACA,UAAKE,QAAL,GAAgB,MAAKA,QAAL,CAAcF,IAAd,gDAAhB;AALiB;AAMlB;;;;oCAEmC;AAAA,UAAxBG,GAAwB,QAAxBA,GAAwB;AAAA,UAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,UAATC,KAAS,QAATA,KAAS;AAClC,aAAOC,yBAAIC,IAAJ,CACL;AACEJ,QAAAA,GAAG,EAAHA,GADF;AAEEC,QAAAA,QAAQ,EAARA,QAFF;AAGEC,QAAAA,KAAK,EAALA;AAHF,OADK,EAMLG,mBAAOC,MANF,CAAP;AAQD;;;;;;oDAEcC,G,EAAKC,G,EAAKC,I;;;;;;;;4BAEUF,GAAG,CAACG,I,EAA3BT,Q,aAAAA,Q,EAAUU,Q,aAAAA,Q;;sBACd,CAACV,QAAD,IAAa,CAACU,Q;;;;;sBAAgBC,KAAK,CAAC,qBAAD,C;;;;uBACpB,KAAKC,MAAL,CAAY;AAAEZ,kBAAAA,QAAQ,EAARA,QAAF;AAAYU,kBAAAA,QAAQ,EAARA;AAAZ,iBAAZ,C;;;AAAbG,gBAAAA,I;AACAC,gBAAAA,K,GAAQ,KAAKC,SAAL,CAAeF,IAAf,C;iDACPN,GAAG,CACPS,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEJ,kBAAAA,IAAI,EAAJA,IAAF;AAAQC,kBAAAA,KAAK,EAALA,KAAR;AAAeI,kBAAAA,OAAO,mCAA4BL,IAAI,CAACb,QAAjC;AAAtB,iBAFD,C;;;;;AAIPM,gBAAAA,GAAG,CAACa,KAAJ,GAAY;AAAED,kBAAAA,OAAO,EAAE,sBAAX;AAAmCF,kBAAAA,MAAM,EAAE,GAA3C;AAAgDI,kBAAAA,MAAM;AAAtD,iBAAZ;iDACOZ,IAAI,E;;;;;;;;;;;;;;;;;;;;;qDAIHF,G,EAAKC,G,EAAKC,I;;;;;;;;6BAEaF,GAAG,CAACG,I,EAA3BT,Q,cAAAA,Q,EAAUU,Q,cAAAA,Q;;sBACd,CAACV,QAAD,IAAa,CAACU,Q;;;;;sBAAgBC,KAAK,CAAC,qBAAD,C;;;;uBACpB,KAAKU,MAAL,CAAYC,OAAZ,CAAoB;AAAEtB,kBAAAA,QAAQ,EAARA;AAAF,iBAApB,EAAkCuB,QAAlC,CAA2C,OAA3C,C;;;AAAbV,gBAAAA,I;;qBACFA,IAAI,CAACW,YAAL,CAAkBlB,GAAG,CAACG,IAAJ,CAASC,QAA3B,C;;;;;AACII,gBAAAA,K,GAAQ,KAAKC,SAAL,CAAeF,IAAf,C;AACdN,gBAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,kBAAAA,IAAI,EAAJA,IAAF;AAAQC,kBAAAA,KAAK,EAALA,KAAR;AAAeI,kBAAAA,OAAO,yBAAkBL,IAAI,CAACb,QAAvB;AAAtB,iBAArB;;;;;sBAEMW,KAAK,CAAC,qBAAD,C;;;;;;;;;AAGbL,gBAAAA,GAAG,CAACa,KAAJ,GAAY;AAAED,kBAAAA,OAAO,EAAE,mBAAX;AAAgCF,kBAAAA,MAAM,EAAE,GAAxC;AAA6CI,kBAAAA,MAAM;AAAnD,iBAAZ;AACAZ,gBAAAA,IAAI;;;;;;;;;;;;;;;;;;;;;qDAICF,G,EAAKC,G,EAAKC,I;;;;;;;;uBAEI,KAAKa,MAAL,CAAYC,OAAZ,CAAoB;AAAEtB,kBAAAA,QAAQ,EAAEM,GAAG,CAACmB,OAAJ,CAAYzB;AAAxB,iBAApB,EAAwDuB,QAAxD,CAAiE,OAAjE,C;;;AAAbV,gBAAAA,I;AACNN,gBAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,IAArB;;;;;;;AAEAP,gBAAAA,GAAG,CAACa,KAAJ,GAAY;AAAED,kBAAAA,OAAO,EAAE,mBAAX;AAAgCF,kBAAAA,MAAM,EAAE,GAAxC;AAA6CI,kBAAAA,MAAM;AAAnD,iBAAZ;AACAZ,gBAAAA,IAAI;;;;;;;;;;;;;;;;;;EA3DoBkB,0B;;eA+DfjC,e","sourcesContent":["import AppController from './AppController';\nimport jwt from 'jsonwebtoken';\nimport config from '../../config';\n\nclass AdminController extends AppController {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(model) {\n    super(model);\n\n    this.login = this.login.bind(this);\n    this.me = this.me.bind(this);\n    this.register = this.register.bind(this);\n  }\n\n  makeToken({ _id, username, games }) {\n    return jwt.sign(\n      {\n        _id,\n        username,\n        games\n      },\n      config.secret\n    );\n  }\n\n  async register(req, res, next) {\n    try {\n      const { username, password } = req.body;\n      if (!username || !password) throw Error('missing credentials');\n      const user = await this.create({ username, password });\n      const token = this.makeToken(user);\n      return res\n        .status(200)\n        .json({ user, token, message: `thanks for registering ${user.username}` });\n    } catch (e) {\n      req.error = { message: 'cannot register user', status: 500, errors: e };\n      return next();\n    }\n  }\n\n  async login(req, res, next) {\n    try {\n      const { username, password } = req.body;\n      if (!username || !password) throw Error('missing credentials');\n      const user = await this._model.findOne({ username }).populate('games');\n      if (user.authenticate(req.body.password)) {\n        const token = this.makeToken(user);\n        res.status(200).json({ user, token, message: `Welcome home ${user.username}` });\n      } else {\n        throw Error('invalid credentials');\n      }\n    } catch (e) {\n      req.error = { message: 'cannot login user', status: 500, errors: e };\n      next();\n    }\n  }\n\n  async me(req, res, next) {\n    try {\n      const user = await this._model.findOne({ username: req.decoded.username }).populate('games');\n      res.status(200).json(user);\n    } catch (e) {\n      req.error = { message: 'cannot login user', status: 500, errors: e };\n      next();\n    }\n  }\n}\nexport default AdminController;\n"],"file":"UserController.js"}